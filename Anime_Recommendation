{
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "### Imports"
      ],
      "metadata": {
        "id": "NQgdXgvVdIB5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import re\n",
        "import time\n",
        "import warnings\n",
        "import numpy as np\n",
        "from sklearn.preprocessing import normalize\n",
        "from sklearn.feature_extraction.text import CountVectorizer\n",
        "from sklearn.manifold import TSNE\n",
        "import seaborn as sns\n",
        "from sklearn.metrics import confusion_matrix, accuracy_score, log_loss\n",
        "\n",
        "from sklearn.linear_model import SGDClassifier\n",
        "from imblearn.over_sampling import SMOTE\n",
        "\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.model_selection import GridSearchCV\n",
        "import math\n",
        "warnings.filterwarnings(\"ignore\")\n",
        "\n",
        "\n",
        "from sklearn import model_selection\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "\n",
        "import pickle\n"
      ],
      "metadata": {
        "id": "wvfF0aEXbte0"
      },
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Downloading csv files"
      ],
      "metadata": {
        "id": "7v-3nsDxdLa6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!wget --header=\"Host: doc-0g-4k-docs.googleusercontent.com\" --header=\"User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36\" --header=\"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\" --header=\"Accept-Language: en-GB,en-US;q=0.9,en;q=0.8\" --header=\"Cookie: AUTH_mm5pe75pf4mhpbdikb2k80b74s62g311_nonce=2c0hqefg23pgi\" --header=\"Connection: keep-alive\" \"https://doc-0g-4k-docs.googleusercontent.com/docs/securesc/lo66ka9s3k9ovif7kku17kum7962ok4j/qsjidfpnmj4diojc7cc9ek2g7tdcv8d7/1645937700000/08255761277798433337/08255761277798433337/18dK6EVVTOQmncVkR0TlydW8d9QZu5sOa?e=download&ax=ACxEAsZ0mDa1Kxbt_BnnIXEPrN9U3UVhQ7VNLzMRNviC34EXgDq_Zt2Yv19xTfOWYaAsU4MG5hmCRwb77fgVEbzKv8oLwcyBqGoaqlKGRjj2tgUmgw-cKnWmF74IK8azzeZk7I1hHOMvy_HUdpP00CGqayZFPekAw1aeH4iev8qRzjCuElnwDuQirD_nOksMOckOXVeErutphQzsgTHaMYLYrljP7PAlIW83XFGYhJE8IMU1e13ryeIMudi_5ojc8z5plTfdaArxehhYIbUWFFHr4Dwj2zDYmU-fMHJeivAFz1u6TZUHRVACFR_2BkxzIYVhaIYnaUgFBEFaTHudEOXEwlQ5eh-asBl231FgkrZgvdDIP8zmTtyCpI-ny43JP7552prniekYvrnuww5HyZis_kN2UjVCPhX-szSsZRiFVWFlHrdddAPrVLyzvukQ2P9UzrT3Ygj7UjKF8zUmiDwrUz7gw-LXQFZKq_D4AYgFmoxZgcRr_MOar1nkjkZuk1qxkiVKZJaFxfLgVf6CRlMQFNOx-ZBBOnWtq0dVdQTyAKdfGJ7qPxPjghwfpLjDM82U_XD2bJlR6blvO6QzUqV7GrvL4lunJbaSh11dMaZbLh7zu1JEksKa6uynhLew2u422LoiLMwiGSgzWrn2SjD7sQ-jc_oQax1FGHwM0AU&authuser=0&nonce=2c0hqefg23pgi&user=08255761277798433337&hash=1jm480unu8d6kqfkindl7ds9s5lmgdq1\" -c -O 'anime_recommendation.zip'"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oscZXiE_cAJW",
        "outputId": "dca956e2-57e8-4583-a168-d5a2dc7feae0"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--2022-02-27 04:56:31--  https://doc-0g-4k-docs.googleusercontent.com/docs/securesc/lo66ka9s3k9ovif7kku17kum7962ok4j/qsjidfpnmj4diojc7cc9ek2g7tdcv8d7/1645937700000/08255761277798433337/08255761277798433337/18dK6EVVTOQmncVkR0TlydW8d9QZu5sOa?e=download&ax=ACxEAsZ0mDa1Kxbt_BnnIXEPrN9U3UVhQ7VNLzMRNviC34EXgDq_Zt2Yv19xTfOWYaAsU4MG5hmCRwb77fgVEbzKv8oLwcyBqGoaqlKGRjj2tgUmgw-cKnWmF74IK8azzeZk7I1hHOMvy_HUdpP00CGqayZFPekAw1aeH4iev8qRzjCuElnwDuQirD_nOksMOckOXVeErutphQzsgTHaMYLYrljP7PAlIW83XFGYhJE8IMU1e13ryeIMudi_5ojc8z5plTfdaArxehhYIbUWFFHr4Dwj2zDYmU-fMHJeivAFz1u6TZUHRVACFR_2BkxzIYVhaIYnaUgFBEFaTHudEOXEwlQ5eh-asBl231FgkrZgvdDIP8zmTtyCpI-ny43JP7552prniekYvrnuww5HyZis_kN2UjVCPhX-szSsZRiFVWFlHrdddAPrVLyzvukQ2P9UzrT3Ygj7UjKF8zUmiDwrUz7gw-LXQFZKq_D4AYgFmoxZgcRr_MOar1nkjkZuk1qxkiVKZJaFxfLgVf6CRlMQFNOx-ZBBOnWtq0dVdQTyAKdfGJ7qPxPjghwfpLjDM82U_XD2bJlR6blvO6QzUqV7GrvL4lunJbaSh11dMaZbLh7zu1JEksKa6uynhLew2u422LoiLMwiGSgzWrn2SjD7sQ-jc_oQax1FGHwM0AU&authuser=0&nonce=2c0hqefg23pgi&user=08255761277798433337&hash=1jm480unu8d6kqfkindl7ds9s5lmgdq1\n",
            "Resolving doc-0g-4k-docs.googleusercontent.com (doc-0g-4k-docs.googleusercontent.com)... 74.125.142.132, 2607:f8b0:400e:c08::84\n",
            "Connecting to doc-0g-4k-docs.googleusercontent.com (doc-0g-4k-docs.googleusercontent.com)|74.125.142.132|:443... connected.\n",
            "HTTP request sent, awaiting response... 200 OK\n",
            "Length: 26329659 (25M) [application/zip]\n",
            "Saving to: ‘anime_recommendation.zip’\n",
            "\n",
            "anime_recommendatio 100%[===================>]  25.11M  72.6MB/s    in 0.3s    \n",
            "\n",
            "2022-02-27 04:56:32 (72.6 MB/s) - ‘anime_recommendation.zip’ saved [26329659/26329659]\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!unzip anime_recommendation.zip"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NqrAsQKHc6Qx",
        "outputId": "c0477e9c-ea6d-4935-9454-e988e5259874"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Archive:  anime_recommendation.zip\n",
            "  inflating: anime.csv               \n",
            "  inflating: __MACOSX/._anime.csv    \n",
            "  inflating: rating.csv              \n",
            "  inflating: __MACOSX/._rating.csv   \n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Reading csv files"
      ],
      "metadata": {
        "id": "xW9seXmodY4n"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Reading anime csv file"
      ],
      "metadata": {
        "id": "LqhTdcaYd2HI"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "anime_data = pd.read_csv('anime.csv')\n",
        "anime_data.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "9FNhFg7Xdd7X",
        "outputId": "4896eedf-9131-4834-f737-9621adab6d55"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-618a55ad-1ef0-4fac-b9da-8d46948220cd\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>anime_id</th>\n",
              "      <th>name</th>\n",
              "      <th>genre</th>\n",
              "      <th>type</th>\n",
              "      <th>episodes</th>\n",
              "      <th>rating</th>\n",
              "      <th>members</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>32281</td>\n",
              "      <td>Kimi no Na wa.</td>\n",
              "      <td>Drama, Romance, School, Supernatural</td>\n",
              "      <td>Movie</td>\n",
              "      <td>1</td>\n",
              "      <td>9.37</td>\n",
              "      <td>200630</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>5114</td>\n",
              "      <td>Fullmetal Alchemist: Brotherhood</td>\n",
              "      <td>Action, Adventure, Drama, Fantasy, Magic, Mili...</td>\n",
              "      <td>TV</td>\n",
              "      <td>64</td>\n",
              "      <td>9.26</td>\n",
              "      <td>793665</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>28977</td>\n",
              "      <td>Gintama°</td>\n",
              "      <td>Action, Comedy, Historical, Parody, Samurai, S...</td>\n",
              "      <td>TV</td>\n",
              "      <td>51</td>\n",
              "      <td>9.25</td>\n",
              "      <td>114262</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>9253</td>\n",
              "      <td>Steins;Gate</td>\n",
              "      <td>Sci-Fi, Thriller</td>\n",
              "      <td>TV</td>\n",
              "      <td>24</td>\n",
              "      <td>9.17</td>\n",
              "      <td>673572</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>9969</td>\n",
              "      <td>Gintama&amp;#039;</td>\n",
              "      <td>Action, Comedy, Historical, Parody, Samurai, S...</td>\n",
              "      <td>TV</td>\n",
              "      <td>51</td>\n",
              "      <td>9.16</td>\n",
              "      <td>151266</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-618a55ad-1ef0-4fac-b9da-8d46948220cd')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-618a55ad-1ef0-4fac-b9da-8d46948220cd button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-618a55ad-1ef0-4fac-b9da-8d46948220cd');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "   anime_id                              name  ... rating members\n",
              "0     32281                    Kimi no Na wa.  ...   9.37  200630\n",
              "1      5114  Fullmetal Alchemist: Brotherhood  ...   9.26  793665\n",
              "2     28977                          Gintama°  ...   9.25  114262\n",
              "3      9253                       Steins;Gate  ...   9.17  673572\n",
              "4      9969                     Gintama&#039;  ...   9.16  151266\n",
              "\n",
              "[5 rows x 7 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Reading rating csv file"
      ],
      "metadata": {
        "id": "Q3VIrS_9d8mQ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "rating_data = pd.read_csv('rating.csv')\n",
        "rating_data.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "BwU3iluJeBDe",
        "outputId": "323e70bd-3898-408f-91f8-cc704d1ac099"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-38b96429-499c-448c-bdb0-e1edd49b748e\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>user_id</th>\n",
              "      <th>anime_id</th>\n",
              "      <th>rating</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>20</td>\n",
              "      <td>-1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>24</td>\n",
              "      <td>-1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>79</td>\n",
              "      <td>-1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>226</td>\n",
              "      <td>-1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1</td>\n",
              "      <td>241</td>\n",
              "      <td>-1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-38b96429-499c-448c-bdb0-e1edd49b748e')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-38b96429-499c-448c-bdb0-e1edd49b748e button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-38b96429-499c-448c-bdb0-e1edd49b748e');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "   user_id  anime_id  rating\n",
              "0        1        20      -1\n",
              "1        1        24      -1\n",
              "2        1        79      -1\n",
              "3        1       226      -1\n",
              "4        1       241      -1"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "66ibGJ74hCde",
        "outputId": "6e383950-724d-4b43-c2e5-fef78810987c"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(12294, 7)\n",
            "(7813737, 3)\n"
          ]
        }
      ],
      "source": [
        "print(anime_data.shape)\n",
        "print(rating_data.shape)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "rating_data['rating'].describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vKNUL03VfNsX",
        "outputId": "7b3d3eba-d1ec-41ca-901a-e1b7e12e16e6"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "count    7.813737e+06\n",
              "mean     6.144030e+00\n",
              "std      3.727800e+00\n",
              "min     -1.000000e+00\n",
              "25%      6.000000e+00\n",
              "50%      7.000000e+00\n",
              "75%      9.000000e+00\n",
              "max      1.000000e+01\n",
              "Name: rating, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### EDA"
      ],
      "metadata": {
        "id": "sxsEQeBEfegJ"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Plotting rating histogram"
      ],
      "metadata": {
        "id": "HlmHoMuqflbr"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "rating_data.hist(column='rating');\n",
        "plt.xlabel(\"Movie ratings\")\n",
        "plt.ylabel(\"probability of ratings\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "46xNQySLfheK",
        "outputId": "f29e735a-dff5-4133-ad74-30622ca4b318"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "rating_data['rating'].value_counts()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lTP25EU7iGmK",
        "outputId": "5e640dc1-c6e9-403b-8005-99972f1c014a"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              " 8     1646019\n",
              "-1     1476496\n",
              " 7     1375287\n",
              " 9     1254096\n",
              " 10     955715\n",
              " 6      637775\n",
              " 5      282806\n",
              " 4      104291\n",
              " 3       41453\n",
              " 2       23150\n",
              " 1       16649\n",
              "Name: rating, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "1. Almost 14lakh ratings haven't been done\n",
        "2. The rating 1 occurs the least number of times\n",
        "3. The rating 8 occurs the most number of times"
      ],
      "metadata": {
        "id": "PtXgQn--hRKk"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "len(rating_data.user_id.unique())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ydoPyCJcjtaa",
        "outputId": "40407326-8a09-4a31-cf2a-e6f263158934"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "73515"
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "len(rating_data.anime_id.unique())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Zh5usMrLkIhd",
        "outputId": "b814a33d-956c-43fc-ef87-5792b04dd925"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "11200"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "grouped_by_user = rating_data.groupby(\"user_id\")\n",
        "print(grouped_by_user.count())\n",
        "print(\"On average a user has rated these many movies: \", grouped_by_user.count().anime_id.mean())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YTMVo5KLmNcN",
        "outputId": "cc33cf33-0df8-40f4-b561-e31473b836ab"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "         anime_id  rating\n",
            "user_id                  \n",
            "1             153     153\n",
            "2               3       3\n",
            "3              94      94\n",
            "4              52      52\n",
            "5             467     467\n",
            "...           ...     ...\n",
            "73512          13      13\n",
            "73513          33      33\n",
            "73514           1       1\n",
            "73515         196     196\n",
            "73516           2       2\n",
            "\n",
            "[73515 rows x 2 columns]\n",
            "On average a user has rated these many movies:  106.28765558049378\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "grouped_by_movie = rating_data.groupby(\"anime_id\")\n",
        "print(grouped_by_movie.count())\n",
        "print('On average a movie has been rated by these many users: ', grouped_by_movie.count().user_id.mean())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "M6KdnImZnR_9",
        "outputId": "247664ff-77f8-42c7-bb2f-5d480f927785"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "          user_id  rating\n",
            "anime_id                 \n",
            "1           15509   15509\n",
            "5            6927    6927\n",
            "6           11077   11077\n",
            "7            2629    2629\n",
            "8             413     413\n",
            "...           ...     ...\n",
            "34367           5       5\n",
            "34412           1       1\n",
            "34475           4       4\n",
            "34476           1       1\n",
            "34519           1       1\n",
            "\n",
            "[11200 rows x 2 columns]\n",
            "On average a movie has been rated by these many users:  697.6550892857143\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mvB8SDS_hW03"
      },
      "source": [
        "### Pre-processing"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Removing rows that don't have rating"
      ],
      "metadata": {
        "id": "hhhvUjaz5IQQ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "no_rating_data = rating_data[rating_data['rating'] == -1] \n",
        "print(no_rating_data.head())\n",
        "print(no_rating_data.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IB6B5hhK5N_v",
        "outputId": "3bd96947-da8c-4e24-80be-df61b74c8500"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   user_id  anime_id  rating\n",
            "0        1        20      -1\n",
            "1        1        24      -1\n",
            "2        1        79      -1\n",
            "3        1       226      -1\n",
            "4        1       241      -1\n",
            "(1476496, 3)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Creating Adjacency Matrix"
      ],
      "metadata": {
        "id": "8J14BqeXrHY2"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {
        "collapsed": true,
        "id": "t44MNT40hZQW"
      },
      "outputs": [],
      "source": [
        "from scipy.sparse import csr_matrix\n",
        "import numpy as np\n",
        "\n",
        "rows = rating_data['user_id'].values\n",
        "columns = rating_data['anime_id'].values\n",
        "values = rating_data['rating'].values\n",
        "\n",
        "\n",
        "adjacency_matrix = csr_matrix((values, (rows, columns)), shape=(np.amax(rows)+1, np.amax(columns)+1))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "metadata": {
        "id": "-mCgC0WbhZTO",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7ea5b617-24f9-4deb-be3f-de517b521d1c"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(73517, 34476)"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ],
      "source": [
        "adjacency_matrix.shape"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "OJPWI9VwD_ih"
      },
      "source": [
        "#### Matrix Factorization"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 12,
      "metadata": {
        "id": "ZYnsKBmFEIg3",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "47929619-ff76-464b-da16-c55524160f4f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(73517, 5)\n",
            "(5,)\n",
            "(34476, 5)\n"
          ]
        }
      ],
      "source": [
        "from sklearn.utils.extmath import randomized_svd\n",
        "import numpy as np \n",
        "# matrix = adjacency_matrix.toarray() # converting to dense matrix\n",
        "U, Sigma, VT = randomized_svd(adjacency_matrix, n_components = 5, n_iter = 5, random_state = None)\n",
        "print(U.shape)\n",
        "print(Sigma.shape)\n",
        "V = VT.T\n",
        "print(V.shape)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Collaborative Filtering"
      ],
      "metadata": {
        "id": "jsipj7Q6t8jT"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "83Vh4NoO_JyU"
      },
      "source": [
        "#### Compute mean of ratings"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {
        "collapsed": true,
        "id": "cBHuCn2QSEnl"
      },
      "outputs": [],
      "source": [
        "def m_u(ratings):\n",
        "    '''In this function, we will compute mean for all the ratings'''\n",
        "    # you can use mean() function to do this\n",
        "    # check this (https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.mean.html) link for more details.\n",
        "\n",
        "    return ratings.mean()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "metadata": {
        "id": "iu1nn-1x3ebp",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "49b4732a-8e46-4579-c0f8-54e828c3bd43"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "7.808496946857473\n"
          ]
        }
      ],
      "source": [
        "mu = m_u(rating_data['rating'])\n",
        "print(mu)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qSvAW1X94g3G"
      },
      "source": [
        "#### Computing Biases"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 25,
      "metadata": {
        "collapsed": true,
        "id": "AyEJqPka4lBW"
      },
      "outputs": [],
      "source": [
        "def initialize(dim):\n",
        "    '''In this function, we will initialize bias value 'B' and 'C'.'''\n",
        "    # initalize the value to zeros \n",
        "    # return output as a list of zeros\n",
        "    arr = []\n",
        "    for i in range(0, dim):\n",
        "        arr.append(0)\n",
        "\n",
        "    return arr"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 34,
      "metadata": {
        "collapsed": true,
        "id": "Nlae9QAQ43Xz"
      },
      "outputs": [],
      "source": [
        "dim = np.amax(rows) + 1# give the number of dimensions for b_i (Here b_i corresponds to users)\n",
        "b_i=initialize(dim)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 35,
      "metadata": {
        "collapsed": true,
        "id": "rwuopn4HoEbP"
      },
      "outputs": [],
      "source": [
        "dim = np.amax(columns) + 1 # give the number of dimensions for c_j (Here c_j corresponds to movies)\n",
        "c_j=initialize(dim)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DTDK4ZR18MrZ"
      },
      "source": [
        "##### Compute dL/db_i"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 28,
      "metadata": {
        "collapsed": true,
        "id": "3NFzVC1N8S4L"
      },
      "outputs": [],
      "source": [
        "def derivative_db(user_id,item_id,rating,U,V,mu,alpha):\n",
        "    '''In this function, we will compute dL/db_i'''\n",
        "    return 2*(mu + 2*b_i[user_id] + c_j[item_id] + U[user_id].dot(V.T[item_id].T) - rating)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1Kp0hC_b9v60"
      },
      "source": [
        "##### Compute dL/dc_j"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 29,
      "metadata": {
        "collapsed": true,
        "id": "FAtSYMrc9UqJ"
      },
      "outputs": [],
      "source": [
        "def derivative_dc(user_id,item_id,rating,U,V,mu, alpha):\n",
        "    '''In this function, we will compute dL/dc_j'''\n",
        "    return 2*(mu + b_i[user_id] + 2*c_j[item_id] + U[user_id].dot(V.T[item_id].T) - rating)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### SGD + Computing MSE"
      ],
      "metadata": {
        "id": "PBoF-TG3t2vD"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 43,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WevBRn7Ead8T",
        "outputId": "45a3f2e4-b808-4dc3-c1eb-b5b4d1b8e73e"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 6337241/6337241 [01:00<00:00, 104730.98it/s]\n",
            "100%|██████████| 6337241/6337241 [00:59<00:00, 106288.02it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1.673245029034275]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 6337241/6337241 [00:59<00:00, 106506.09it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1.673245029034275, 1.6731643225000694]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 6337241/6337241 [00:59<00:00, 105981.86it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1.673245029034275, 1.6731643225000694, 1.673086300780238]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 6337241/6337241 [00:59<00:00, 106244.75it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1.673245029034275, 1.6731643225000694, 1.673086300780238, 1.6730108228863723]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 6337241/6337241 [00:59<00:00, 105676.27it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1.673245029034275, 1.6731643225000694, 1.673086300780238, 1.6730108228863723, 1.6729377593307166]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 6337241/6337241 [01:00<00:00, 105465.94it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1.673245029034275, 1.6731643225000694, 1.673086300780238, 1.6730108228863723, 1.6729377593307166, 1.6728669905518256]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 6337241/6337241 [00:59<00:00, 106090.66it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1.673245029034275, 1.6731643225000694, 1.673086300780238, 1.6730108228863723, 1.6729377593307166, 1.6728669905518256, 1.6727984056851006]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 6337241/6337241 [01:00<00:00, 105076.69it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1.673245029034275, 1.6731643225000694, 1.673086300780238, 1.6730108228863723, 1.6729377593307166, 1.6728669905518256, 1.6727984056851006, 1.672731901578169]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 6337241/6337241 [01:00<00:00, 105280.98it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1.673245029034275, 1.6731643225000694, 1.673086300780238, 1.6730108228863723, 1.6729377593307166, 1.6728669905518256, 1.6727984056851006, 1.672731901578169, 1.6726673819843878]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 6337241/6337241 [00:59<00:00, 105660.46it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1.673245029034275, 1.6731643225000694, 1.673086300780238, 1.6730108228863723, 1.6729377593307166, 1.6728669905518256, 1.6727984056851006, 1.672731901578169, 1.6726673819843878, 1.6726047568891962]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 6337241/6337241 [01:00<00:00, 105156.97it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1.673245029034275, 1.6731643225000694, 1.673086300780238, 1.6730108228863723, 1.6729377593307166, 1.6728669905518256, 1.6727984056851006, 1.672731901578169, 1.6726673819843878, 1.6726047568891962, 1.672543941937835]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 6337241/6337241 [00:59<00:00, 106633.46it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1.673245029034275, 1.6731643225000694, 1.673086300780238, 1.6730108228863723, 1.6729377593307166, 1.6728669905518256, 1.6727984056851006, 1.672731901578169, 1.6726673819843878, 1.6726047568891962, 1.672543941937835, 1.6724848579422167]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 6337241/6337241 [00:59<00:00, 106337.63it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1.673245029034275, 1.6731643225000694, 1.673086300780238, 1.6730108228863723, 1.6729377593307166, 1.6728669905518256, 1.6727984056851006, 1.672731901578169, 1.6726673819843878, 1.6726047568891962, 1.672543941937835, 1.6724848579422167, 1.6724274304507847]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 6337241/6337241 [00:59<00:00, 106629.23it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1.673245029034275, 1.6731643225000694, 1.673086300780238, 1.6730108228863723, 1.6729377593307166, 1.6728669905518256, 1.6727984056851006, 1.672731901578169, 1.6726673819843878, 1.6726047568891962, 1.672543941937835, 1.6724848579422167, 1.6724274304507847, 1.6723715893696318]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 6337241/6337241 [00:59<00:00, 106399.57it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1.673245029034275, 1.6731643225000694, 1.673086300780238, 1.6730108228863723, 1.6729377593307166, 1.6728669905518256, 1.6727984056851006, 1.672731901578169, 1.6726673819843878, 1.6726047568891962, 1.672543941937835, 1.6724848579422167, 1.6724274304507847, 1.6723715893696318, 1.6723172686258434]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 6337241/6337241 [00:59<00:00, 106374.09it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1.673245029034275, 1.6731643225000694, 1.673086300780238, 1.6730108228863723, 1.6729377593307166, 1.6728669905518256, 1.6727984056851006, 1.672731901578169, 1.6726673819843878, 1.6726047568891962, 1.672543941937835, 1.6724848579422167, 1.6724274304507847, 1.6723715893696318, 1.6723172686258434, 1.6722644058663234]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 6337241/6337241 [00:59<00:00, 106796.41it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1.673245029034275, 1.6731643225000694, 1.673086300780238, 1.6730108228863723, 1.6729377593307166, 1.6728669905518256, 1.6727984056851006, 1.672731901578169, 1.6726673819843878, 1.6726047568891962, 1.672543941937835, 1.6724848579422167, 1.6724274304507847, 1.6723715893696318, 1.6723172686258434, 1.6722644058663234, 1.6722129421867853]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 6337241/6337241 [01:00<00:00, 105276.16it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1.673245029034275, 1.6731643225000694, 1.673086300780238, 1.6730108228863723, 1.6729377593307166, 1.6728669905518256, 1.6727984056851006, 1.672731901578169, 1.6726673819843878, 1.6726047568891962, 1.672543941937835, 1.6724848579422167, 1.6724274304507847, 1.6723715893696318, 1.6723172686258434, 1.6722644058663234, 1.6722129421867853, 1.672162821886624]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 6337241/6337241 [00:59<00:00, 106020.95it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1.673245029034275, 1.6731643225000694, 1.673086300780238, 1.6730108228863723, 1.6729377593307166, 1.6728669905518256, 1.6727984056851006, 1.672731901578169, 1.6726673819843878, 1.6726047568891962, 1.672543941937835, 1.6724848579422167, 1.6724274304507847, 1.6723715893696318, 1.6723172686258434, 1.6722644058663234, 1.6722129421867853, 1.672162821886624, 1.6721139922463466]\n"
          ]
        }
      ],
      "source": [
        "from tqdm import tqdm\n",
        "from sklearn.metrics import mean_squared_error\n",
        "\n",
        "np_data = rating_data.to_numpy()\n",
        "epochs = 20\n",
        "learning_rate = 0.001\n",
        "mses_1 = []\n",
        "for epoch in range(0, epochs):\n",
        "    y_pred = []\n",
        "    for row in tqdm(np_data):\n",
        "        user = row[0]\n",
        "        movie = row[1]\n",
        "        rating = row[2]\n",
        "        b_i[user] = b_i[user] - learning_rate * derivative_db(user, movie, rating, U, VT, mu, learning_rate)  \n",
        "        c_j[movie] = c_j[movie] - learning_rate * derivative_dc(user, movie, rating, U, VT, mu,learning_rate)\n",
        "            \n",
        "        y_pred.append(mu + b_i[user] + c_j[movie] + U[user].dot(V[movie].T))\n",
        "                \n",
        "    mse = mean_squared_error(rating_data['rating'].values, y_pred)\n",
        "    if(epoch == 0):\n",
        "      mses_1.append(mse)\n",
        "      continue\n",
        "    last_mse = mses_1[-1]\n",
        "    if(mse >= last_mse):\n",
        "      print(\"Error increased..\")\n",
        "      print(mse, last_mse)\n",
        "      break\n",
        "    elif((last_mse - mse) < 0.000001):\n",
        "      print(\"Error did not decrease by much..: \", (mse - last_mse))\n",
        "      print(mse, last_mse)\n",
        "      break \n",
        "    print(mses_1)\n",
        "    mses_1.append(mse)\n",
        "            \n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 44,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 332
        },
        "id": "r9lP646Ead8T",
        "outputId": "1dd7005c-fdf9-4016-c3e4-0e5c2c49ceea"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1.673245029034275, 1.6731643225000694, 1.673086300780238, 1.6730108228863723, 1.6729377593307166, 1.6728669905518256, 1.6727984056851006, 1.672731901578169, 1.6726673819843878, 1.6726047568891962, 1.672543941937835, 1.6724848579422167, 1.6724274304507847, 1.6723715893696318, 1.6723172686258434, 1.6722644058663234, 1.6722129421867853, 1.672162821886624, 1.6721139922463466, 1.6720664033246906]\n"
          ]
        }
      ],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "plt.plot(range(1, len(mses_1) + 1), mses_1, label='MSEs')\n",
        "\n",
        "plt.legend()\n",
        "plt.xlabel(\"epochs\")\n",
        "plt.ylabel(\"MSEs\")\n",
        "plt.title(\"epoch Vs MSE\")\n",
        "plt.grid()\n",
        "plt.show()\n",
        "print(mses_1)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NeWAGkT6C9kq"
      },
      "source": [
        "### Recommendation for Users"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 52,
      "metadata": {
        "collapsed": true,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "69Y6adUTad8V",
        "outputId": "4d193493-c086-4fda-a71a-deae42844ef4"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 12294/12294 [00:00<00:00, 172734.16it/s]\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['Kimi no Na wa.', 'Gintama°', 'Gintama&#039;',\n",
              "       'Ginga Eiyuu Densetsu', 'Gintama&#039;: Enchousen'], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 52
        }
      ],
      "source": [
        "from tqdm import tqdm\n",
        "# predicting ratings for all the movies for a user\n",
        "def predict_rating_for_user(user_id):\n",
        "  predicted_ratings_for_user = {}\n",
        "  for movie_id in tqdm(anime_data['anime_id'].values):\n",
        "    if(movie_id >= len(c_j)): # if a movie is not rated by any of the users, we cannot predict rating for that movie. This is called cold start problem.\n",
        "      continue # this if condition ignores such movies since matrix factorization cannot solve that issue.\n",
        "    predicted_rating = mu + b_i[user_id] + c_j[movie_id] + U[user_id].dot(V[movie_id].T)\n",
        "    predicted_ratings_for_user[movie_id] = predicted_rating\n",
        "  return predicted_ratings_for_user\n",
        "                                                                          \n",
        "\n",
        "# getting top 5 animes names based on the predicted ratings and recommending it to a user\n",
        "def get_top_5_animes(user_id):\n",
        "  predicted_ratings_for_user = predict_rating_for_user(user_id)\n",
        "  top_5_anime_ids = sorted(predicted_ratings_for_user, key = predicted_ratings_for_user.get, reverse = True)[:5]\n",
        "  # print(top_5_anime_ids)\n",
        "  recommended_movie_data = anime_data[anime_data['anime_id'].isin(top_5_anime_ids)]\n",
        "  # print(recommended_movie_data['name'].values)\n",
        "  return recommended_movie_data['name'].values\n",
        "\n",
        "\n",
        "get_top_5_animes(1)\n",
        "\n",
        "\n"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "collapsed_sections": [
        "7v-3nsDxdLa6",
        "sxsEQeBEfegJ",
        "hhhvUjaz5IQQ",
        "OJPWI9VwD_ih",
        "83Vh4NoO_JyU"
      ],
      "name": "Movie Recommendation system own case study.ipynb",
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.6.2"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}